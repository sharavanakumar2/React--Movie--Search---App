{"ast":null,"code":"// MovieSearchApp/src/services/omdbApi.js\nconst API_KEY = 'a0a3117f'; // Replace with your actual API key\n\nexport const searchMovies = async (searchTerm, page = 1, type = '') => {\n  try {\n    const response = await fetch(`https://www.omdbapi.com/?s=${searchTerm}&page=${page}&apikey=${API_KEY}&type=${type}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    throw error;\n  }\n};\nexport const getMovieDetails = async imdbID => {\n  try {\n    const response = await fetch(`https://www.omdbapi.com/?i=${imdbID}&apikey=${API_KEY}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_KEY","searchMovies","searchTerm","page","type","response","fetch","ok","Error","data","json","error","console","getMovieDetails","imdbID"],"sources":["D:/New tasks(Chatgpt)/React app/src/services/omdbApi.js"],"sourcesContent":["// MovieSearchApp/src/services/omdbApi.js\r\nconst API_KEY = 'a0a3117f'; // Replace with your actual API key\r\n\r\nexport const searchMovies = async (searchTerm, page = 1, type = '') => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.omdbapi.com/?s=${searchTerm}&page=${page}&apikey=${API_KEY}&type=${type}`\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching movies:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMovieDetails = async (imdbID) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://www.omdbapi.com/?i=${imdbID}&apikey=${API_KEY}`\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching movie details:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,UAAU,CAAC,CAAC;;AAE5B,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,UAAU,EAAEC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,EAAE,KAAK;EACrE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8BAA8BJ,UAAU,SAASC,IAAI,WAAWH,OAAO,SAASI,IAAI,EACtF,CAAC;IACD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAOC,MAAM,IAAK;EAC/C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8BAA8BQ,MAAM,WAAWd,OAAO,EACxD,CAAC;IACD,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}